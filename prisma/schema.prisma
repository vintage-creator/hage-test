generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserKind {
  ENTERPRISE
  DISTRIBUTOR
  END_USER
  LOGISTIC_SERVICE_PROVIDER
}

enum RoleType {
  CROSS_BORDER_LOGISTICS
  TRANSPORTER
  LAST_MILE_PROVIDER
}

enum ShipmentStatus {
  PENDING_ACCEPTANCE
  ACCEPTED
  EN_ROUTE_TO_PICKUP
  PICKED_UP
  IN_TRANSIT
  ARRIVED_AT_DESTINATION
  COMPLETED
  CANCELLED
}

enum PickupMode {
  PICKUP
  DROPOFF
}

enum ServiceType {
  AIR
  OCEAN
  ROAD
  RAIL
}

enum DocumentType {
  COMMERCIAL_INVOICE
  PACKING_LIST
  WAYBILL
  BILL_OF_LADING
  OTHER
}

enum NotificationType {
  EMAIL
  IN_APP
  SMS
}

model User {
  id         String   @id @default(cuid())
  email      String?  @unique
  phone      String?  @unique
  password   String?
  kind       UserKind
  role       RoleType?
  companyId  String? 
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  company            Company?        @relation(fields: [companyId], references: [id])
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]

  // Shipment Relations
  createdShipments       Shipment[]           @relation("ShipmentCreator")
  customerShipments      Shipment[]           @relation("CustomerShipments")
  transporterShipments   Shipment[]           @relation("TransporterShipments")
  
  // Status History
  statusUpdates          ShipmentStatusHistory[]
  
  // Notifications
  notifications          Notification[]
}

model Company {
  id             String   @id @default(cuid())
  fullName       String
  phoneNumber    String
  emailAddress   String
  businessName   String
  businessAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  documents TrackingDocument[]
  users     User[]
  warehouses      Warehouse[]
}

model TrackingDocument {
  id         String   @id @default(cuid())
  companyId  String
  type       DocType
  url        String
  uploadedAt DateTime @default(now())

  company    Company @relation(fields: [companyId], references: [id])
}

enum DocType {
  COMPANY_REGISTRATION_CERTIFICATE
  TAX_REGISTRATION_CERTIFICATE
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  userAgent  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  user User @relation(fields: [userId], references: [id])
}

model Warehouse {
  id          String   @id @default(cuid())
  name        String
  address     String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company     @relation(fields: [companyId], references: [id])
  shipments   Shipment[]  @relation("WarehouseShipments")
}

model Shipment {
  id                    String          @id @default(uuid())
  orderId               String          @unique // ORD-2025-00001
  
  // CLIENT DETAILS
  clientName            String
  email                 String?
  phone                 String?
  
  // CARGO DETAILS
  cargoType             String
  tons                  Float
  weight                Float
  handlingInstructions  String?
  
  // ORIGIN & DESTINATION (JSON format)
  origin                Json            // {country, region, state, lga, address}
  destination           Json
  
  // PICKUP & DELIVERY
  pickupMode            PickupMode
  pickupDate            DateTime?
  deliveryDate          DateTime?
  
  // SERVICE & PRICING
  serviceType           ServiceType
  baseFrieght           Float
  handlingFee           Float
  insuranceFee          Float?
  totalCost             Float
  
  // STATUS & ASSIGNMENT
  status                ShipmentStatus  @default(PENDING_ACCEPTANCE)
  assignedTransporterId String?
  assignedWarehouseId   String?
  
  // TRACKING
  createdBy             String
  customerId            String
  
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // RELATIONS
  creator               User                      @relation("ShipmentCreator", fields: [createdBy], references: [id])
  customer              User                      @relation("CustomerShipments", fields: [customerId], references: [id])
  transporter           User?                     @relation("TransporterShipments", fields: [assignedTransporterId], references: [id])
  warehouse             Warehouse?                @relation("WarehouseShipments", fields: [assignedWarehouseId], references: [id])
  
  documents             ShipmentDocument[]
  statusHistory         ShipmentStatusHistory[]
  events                TrackingEvent[]
  
  @@index([orderId])
  @@index([status])
  @@index([customerId])
  @@index([createdBy])
}

model ShipmentDocument {
  id          String        @id @default(uuid())
  shipmentId  String
  docType     DocumentType
  url         String
  uploadedAt  DateTime      @default(now())
  
  shipment    Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  
  @@index([shipmentId])
}

model ShipmentStatusHistory {
  id          String        @id @default(uuid())
  shipmentId  String
  status      ShipmentStatus
  note        String?
  updatedBy   String
  timestamp   DateTime      @default(now())
  
  shipment    Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  updatedByUser User        @relation(fields: [updatedBy], references: [id])
  
  @@index([shipmentId])
  @@index([timestamp])
}

model TrackingEvent {
  id          String   @id @default(cuid())
  shipmentId  String
  status      String
  location    String?
  note        String?
  timestamp   DateTime @default(now())

  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  message     String
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id])
  
  @@index([userId, read])
}
