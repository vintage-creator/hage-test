generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserKind {
  ENTERPRISE
  DISTRIBUTOR
  END_USER
  LOGISTIC_SERVICE_PROVIDER
}

enum RoleType {
  CROSS_BORDER_LOGISTICS
  TRANSPORTER
  LAST_MILE_PROVIDER
}

model User {
  id         String   @id @default(cuid())
  email      String?  @unique
  phone      String?  @unique
  password   String?
  kind       UserKind
  role       RoleType?
  companyId  String? 
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  company            Company?        @relation(fields: [companyId], references: [id])
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]

  shipments           Shipment[]           @relation("CustomerShipments")
  notifications       Notification[]
}

model Company {
  id             String   @id @default(cuid())
  fullName       String
  phoneNumber    String
  emailAddress   String
  businessName   String
  businessAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  documents TrackingDocument[]
  users     User[]
}

model TrackingDocument {
  id         String   @id @default(cuid())
  companyId  String
  type       DocType
  url        String
  uploadedAt DateTime @default(now())

  company    Company @relation(fields: [companyId], references: [id])
}

enum DocType {
  COMPANY_REGISTRATION_CERTIFICATE
  TAX_REGISTRATION_CERTIFICATE
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  userAgent  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  user User @relation(fields: [userId], references: [id])
}


model Shipment {
  id                  String              @id @default(uuid())
  trackingNumber      String              @unique
  status              String              @default("pending")
  customerId          String

  // ORIGIN DETAILS
  originCountry       String
  originState         String
  originAddress       String
  originPhone         String?

  // DESTINATION DETAILS
  destinationCountry  String
  destinationState    String
  destinationAddress  String
  destinationPhone    String?

  // SHIPMENT DETAILS
  payment             Float?
  client              String?
  email               String?
  cargoType           String?
  weight              String?
  tons                Float?
  pickupDate          DateTime?
  deliveryDate        DateTime?
  serviceLevel        String?

  // METADATA
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // RELATIONS
  customer            User               @relation("CustomerShipments", fields: [customerId], references: [id])
  events              TrackingEvent[]
  documents           ShipmentDocument[]
}

model ShipmentDocument {
  id          String   @id @default(uuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id])
  url         String
  uploadedAt  DateTime @default(now())
}

model TrackingEvent {
  id         String   @id @default(cuid())
  shipmentId String
  status     String
  location   String?
  note       String?
  timestamp  DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id])

  @@index([shipmentId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  data        Json?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}
