generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserKind {
  ENTERPRISE
  DISTRIBUTOR
  END_USER
  LOGISTIC_SERVICE_PROVIDER
}

enum RoleType {
  CROSS_BORDER_LOGISTICS
  TRANSPORTER
  LAST_MILE_PROVIDER
}

model User {
  id         String   @id @default(cuid())
  email      String?  @unique
  phone      String?  @unique
  password   String?
  kind       UserKind
  role       RoleType?
  companyId  String? 
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  company            Company?        @relation(fields: [companyId], references: [id])
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
}

model Company {
  id             String   @id @default(cuid())
  fullName       String
  phoneNumber    String
  emailAddress   String
  businessName   String
  businessAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  documents TrackingDocument[]
  users     User[]
}

model TrackingDocument {
  id         String   @id @default(cuid())
  companyId  String
  type       DocType
  url        String
  uploadedAt DateTime @default(now())

  company    Company @relation(fields: [companyId], references: [id])
}

enum DocType {
  COMPANY_REGISTRATION_CERTIFICATE
  TAX_REGISTRATION_CERTIFICATE
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  userAgent  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  user User @relation(fields: [userId], references: [id])
}
